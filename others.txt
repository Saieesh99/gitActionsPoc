To add .github folder

git add .github/workflows/deploy-dev.yml
git add .github/workflows/deploy-qa.yml
git commit -m "Add GitHub Actions workflows"
git push origin dev


sudo apt update
sudo apt install zip -y


zip -v

--install terraform
    sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
    curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg

    echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
    sudo tee /etc/apt/sources.list.d/hashicorp.list

    sudo apt update
    sudo apt install terraform

if not working
    T_VERSION="1.6.6"
    cd /tmp
    curl -LO "https://releases.hashicorp.com/terraform/${T_VERSION}/terraform_${T_VERSION}_linux_amd64.zip"

    sudo apt install unzip -y
    unzip terraform_${T_VERSION}_linux_amd64.zip
    sudo mv terraform /usr/local/bin/

    terraform version

after installing

    cd terraform
    terraform init

    terraform apply -auto-approve  #this will create a role

    terraform output lambda_role_arn  #Capture the output (Lambda role ARN):


Optional: Workspaces for dev/qa/prod, For separate roles per environment:
    
    terraform workspace list

    terraform workspace new dev
    terraform apply -auto-approve

    terraform workspace new qa
    terraform apply -auto-approve

    terraform workspace select default
    terraform workspace select dev
    terraform workspace select qa


    1. Navigate to your Terraform project directory:  #cd path/to/your/terraform/
    2. terraform state list
    3. terraform plan -destroy
    4. terraform destroy -auto-approve
    5. Clean up local files (if done with project) --> rm -rf .terraform terraform.tfstate terraform.tfstate.backup


# -----------------------------------

bash deploy/deploy_lambda.sh dev
python3 deploy/deploy_connect.py --env dev